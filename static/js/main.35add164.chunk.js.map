{"version":3,"sources":["components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","components/Section/Section.js","App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercent","className","FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","Notification","message","Section","title","children","App","useState","setGood","setNeutral","setBad","countTotalFeedback","isVisible","key","prevGood","prevNeutral","prevBad","parseInt","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"0TAyCeA,EApCI,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,gBAC/C,OACE,qBAAIC,UAAU,aAAd,UACE,qBAAIA,UAAU,kBAAd,iBAEE,+BAAOL,OAGT,qBAAIK,UAAU,kBAAd,oBAEE,+BAAOJ,OAET,qBAAII,UAAU,kBAAd,gBAEE,+BAAOH,OAET,qBAAIG,UAAU,kBAAd,kBAEE,+BAAOF,OAET,qBAAIE,UAAU,kBAAd,8BAEE,iCAAOD,EAAP,cCCOE,G,MAvBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,oBAAIH,UAAU,kBAAd,SACGE,EAAQE,KAAI,SAACC,GAAD,OACX,6BACE,wBACEL,UAAU,yBACVM,KAAK,SACLC,QAAS,kBAAMJ,EAAgBE,IAHjC,SAKGA,KANIA,UCIFG,G,MARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,mBAAGT,UAAU,eAAb,SAA6BS,MCavBC,G,MAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,0BAASZ,UAAU,UAAnB,UACGW,GAAS,oBAAIX,UAAU,gBAAd,SAA+BW,IACxCC,O,MCgEQC,MAjEf,WACE,MAAwBC,mBAAS,GAAjC,mBAAOnB,EAAP,KAAaoB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOlB,EAAP,KAAgBoB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOjB,EAAP,KAAYoB,EAAZ,KA+BMC,EAAqB,kBAAMvB,EAAOC,EAAUC,GAK5CsB,IAAcxB,KAAUC,KAAaC,EAC3C,OACE,sBAAKG,UAAU,UAAf,UACE,cAAC,EAAD,CAASW,MAAM,wBAAf,SACE,cAAC,EAAD,CACET,QAAS,CAAC,OAAQ,MAAO,WACzBC,gBAzBgB,SAACiB,GACvB,OAAQA,GACN,IAAK,OACHL,GAAQ,SAACM,GAAD,OAAcA,EAAW,KACjC,MACF,IAAK,UACHL,GAAW,SAACM,GAAD,OAAiBA,EAAc,KAC1C,MACF,IAAK,MACHL,GAAO,SAACM,GAAD,OAAaA,EAAU,WAmBhC,cAAC,EAAD,CAASZ,MAAM,eAAf,SACGQ,EACC,cAAC,EAAD,CACExB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOoB,IACPnB,gBAlBRyB,SAAU7B,EAAOuB,IAAwB,OAqBnC,cAAC,EAAD,CAAcT,QAAQ,4BC9DhCgB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,cAAc,Y","file":"static/js/main.35add164.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './Statistics.scss'\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercent }) => {\r\n  return (\r\n    <ul className=\"Statistics\">\r\n      <li className=\"Statistics_Item\">\r\n        Good\r\n        <span>{good}</span>\r\n      </li>\r\n\r\n      <li className=\"Statistics_Item\">\r\n        Neutral\r\n        <span>{neutral}</span>\r\n      </li>\r\n      <li className=\"Statistics_Item\">\r\n        Bad\r\n        <span>{bad}</span>\r\n      </li>\r\n      <li className=\"Statistics_Item\">\r\n        Total\r\n        <span>{total}</span>\r\n      </li>\r\n      <li className=\"Statistics_Item\">\r\n        Positive feedback\r\n        <span>{positivePercent}%</span>\r\n      </li>\r\n    </ul>\r\n  )\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number,\r\n  positivePercent: PropTypes.number,\r\n}\r\n\r\nexport default Statistics\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './FeedbackOptions.scss'\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <ul className=\"FeedbackOptions\">\r\n      {options.map((option) => (\r\n        <li key={option}>\r\n          <button\r\n            className=\"FeedbackOptions_Button\"\r\n            type=\"button\"\r\n            onClick={() => onLeaveFeedback(option)}\r\n          >\r\n            {option}\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n  options: PropTypes.arrayOf(PropTypes.string),\r\n}\r\n\r\nexport default FeedbackOptions\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './Notification.scss'\r\n\r\nconst Notification = ({ message }) => {\r\n  return <p className=\"Notification\">{message}</p>\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Notification\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './Section.scss'\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <section className=\"Section\">\r\n      {title && <h2 className=\"Section_Title\">{title}</h2>}\r\n      {children}\r\n    </section>\r\n  )\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n}\r\n\r\nexport default Section\r\n","import React, { useState } from 'react'\r\nimport Statistics from './components/Statistics/Statistics'\r\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions'\r\nimport Notification from './components/Notification/Notification'\r\nimport Section from './components/Section/Section'\r\n\r\nimport './App.scss'\r\n\r\nfunction App() {\r\n  const [good, setGood] = useState(0)\r\n  const [neutral, setNeutral] = useState(0)\r\n  const [bad, setBad] = useState(0)\r\n\r\n  // const [statistics, setStatistics] = useState({\r\n  //   good: 0,\r\n  //   bad: 0,\r\n  //   neutral: 0,\r\n  // })\r\n\r\n  // const handleIncrement = (key) => {\r\n  //   setStatistics((prev) => {\r\n  //     return {\r\n  //       ...prev,\r\n  //       [key]: prev[key] + 1,\r\n  //     }\r\n  //   })\r\n  // }\r\n\r\n  const handleIncrement = (key) => {\r\n    switch (key) {\r\n      case 'good':\r\n        setGood((prevGood) => prevGood + 1)\r\n        break\r\n      case 'neutral':\r\n        setNeutral((prevNeutral) => prevNeutral + 1)\r\n        break\r\n      case 'bad':\r\n        setBad((prevBad) => prevBad + 1)\r\n        break\r\n    }\r\n  }\r\n\r\n  const countTotalFeedback = () => good + neutral + bad\r\n\r\n  const countPositiveFeedbackPercentage = () =>\r\n    parseInt((good / countTotalFeedback()) * 100)\r\n\r\n  const isVisible = !!good || !!neutral || !!bad\r\n  return (\r\n    <div className=\"AppRoot\">\r\n      <Section title=\"Please leave feedback\">\r\n        <FeedbackOptions\r\n          options={['good', 'bad', 'neutral']}\r\n          onLeaveFeedback={handleIncrement}\r\n        />\r\n      </Section>\r\n      <Section title=\"Upload stats\">\r\n        {isVisible ? (\r\n          <Statistics\r\n            good={good}\r\n            neutral={neutral}\r\n            bad={bad}\r\n            total={countTotalFeedback()}\r\n            positivePercent={countPositiveFeedbackPercentage()}\r\n          />\r\n        ) : (\r\n          <Notification message=\"No feedback given\" />\r\n        )}\r\n      </Section>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.querySelector('#root')\r\n)\r\n\r\n// import './index.css';\r\n// import reportWebVitals from './reportWebVitals';\r\n\r\n// ReactDOM.render(\r\n//   <React.StrictMode>\r\n//     <App />\r\n//   </React.StrictMode>,\r\n//   document.getElementById('root')\r\n// );\r\n\r\n// // If you want to start measuring performance in your app, pass a function\r\n// // to log results (for example: reportWebVitals(console.log))\r\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n"],"sourceRoot":""}